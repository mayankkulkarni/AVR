
square_wave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000a8  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000b7c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b6f  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001807  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include<avr/io.h>
#include<util/delay.h>

int main()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRB = DDRB | (1<<3);
  74:	87 e3       	ldi	r24, 0x37	; 55
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	27 e3       	ldi	r18, 0x37	; 55
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	28 60       	ori	r18, 0x08	; 8
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
	OCR0 = 64;
  86:	8c e5       	ldi	r24, 0x5C	; 92
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	20 e4       	ldi	r18, 0x40	; 64
  8c:	fc 01       	movw	r30, r24
  8e:	20 83       	st	Z, r18
	TCNT0 = 0x00;
  90:	82 e5       	ldi	r24, 0x52	; 82
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	fc 01       	movw	r30, r24
  96:	10 82       	st	Z, r1
	TCCR0 = 0x16;
  98:	83 e5       	ldi	r24, 0x53	; 83
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	26 e1       	ldi	r18, 0x16	; 22
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
	while(1);
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x36>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
